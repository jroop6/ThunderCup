*******Priority items, copied from below*******
Refactor simulateOrbs so that it doesn't make permanent changes to orbArray, shootingOrbs, etc.
properly synchronize the methods called by playpanel.tick() and botplayer.tick() to prevent ConcurrentModificationExceptions.
more puzzles!
TransferInOrbs should be able to kill a player.
when another player tries to connect to a game with no open slots, we get the wrong error message
when orbArray goes out of sync, it is replaced with the host data, but electrified orbs freeze. Investigate this.
bot players continue to fire after losing.
if a newly-connected client sends a message, sometimes the host's next message won't be broadcast.

-------Bugs-------
bot players continue to fire after losing.
if a newly-connected client sends a message, sometimes the host's next message won't be broadcast.
firedOrb is inconsistent with 1st ammunitionOrb. Investigate this.
when orbArray goes out of sync, it is replaced with the host data, but electrified orbs freeze. Investigate this.
when another player tries to connect to a game with no open slots, we get the wrong error message
properly synchronize the methods called by playpanel.tick() and botplayer.tick() to prevent ConcurrentModificationExceptions.
(probable bug, also probably very minor) Does findFloatingOrbs detect floating orbs that are on the deathOrbs array?

-------important features-------
ability to select random puzzles or a specific puzzle in competitive multiplayer mode.
puzzle data should specify how many shots cause a new row to appear.
when a game begins, the program should move the camera so that it is centered on your character and maybe have some visual flourish indicate which character is yours.
character voices
slightly nicer visuals for the puzzle selector buttons
more puzzles!
Select secondary and tertiary locations for transferInOrbs?
TransferInOrbs should be able to kill a player.
Incorporate vibrationOffset with the new animation framework. Probably just include an offset parameter in AnimationData.drawSelf().

-------moderate refactoring-------
eliminate Packet - make connectionRejected a SynchronizedComparable.
Instead of each bot having its own thread pool, generate a single pool in GameScene and pass it down to the BotPlayers.
Refactor simulateOrbs so that it doesn't make permanent changes to orbArray, shootingOrbs, etc. Have it return an Outcome object or something to tell you which changes *would* have occurred, and then execute those changes separately.
getNeighbors returns a list of PointInts by necessity, but other functions expect a list of Orbs so I have to go find the associated Orbs. See whether this conversion can be averted.

-------polish-------
Add a pause *button*
implement a visual effect for thunder orbs
reduce volume of music, and normalize all tracks
cannon moving parts have too small a hole - it is only 45 px wide instead of 46. Why I made it that way is beyond me. It even messes up the symmetry of the stationary parts. It's a lot of work for very little benefit, so this is low priority.
add a progress bar at the top, indicating how many shots the player has left until a new row appears.
Add a new feature/game mode - controlling multiple cannons.
Make multiplayer games easier for non-techie people to set up.
Display an error message if java fails to launch with sufficient memory for the game.
Display an error message if openjfx is not installed (an issue that can occur on Linux)
center the "Return to Main Menu" button in the PuzzleSelectionScene or make the mute button smaller.

-------cleanup and loose ends-------
remove the copyForNetworking method and the copy constructors for the various SynchronizedDatas.
make all audio files .mp3
replace i++ with ++i in for-loops (does this even make a difference in Java?)
Make sure the audio credits are complete and correct.
redo all spritesheets to make sure that transparent pixels are actually cropped out.
    An older version of SpriteSheetCreatorUtility had a bug in it.
	It will also change _metadata.csv to spritesheet_metadata.csv, which is better.
make sure all array traversals traverse i first then j, for memory performance reasons.
make sure I'm not using PointInt or Point.Double more often than I need to (you only need to when a function needs to return both an x-value and a y-value, such as with IJtoXY())
remove low-res spritesheets; they're not necessary any more.
remove thunder orbs if I decide not to use them after all

-------misc-------
If memory becomes a problem again, consider other ways to reduce memory usage:
	use an in-memory compression scheme. Look at 3rd party libraries if you have to.
	return to the idea of low-res spritesheets
